version: '3'

services:

  goapp: 
    build: ./go-app
    platform: linux/amd64
    container_name: goapp
    volumes:
      - .:/app
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      
  mysql:
    image: mysql:5.7
    container_name: mysql
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: wallet
      MYSQL_PASSWORD: root
    ports:
      - "3306:3306"
    volumes:
      - .docker/mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 3

  migrate-go-app:
    image: golang:1.22
    container_name: migrate-go-app
    platform: linux/amd64
    depends_on:
      mysql:
        condition: service_healthy
    working_dir: /app
    volumes:
      - ./go-app/db/migrations:/app/migrations:ro
    entrypoint: ["/bin/sh","-c"]
    command: >
      "
      apt-get update && apt-get install -y wget netcat-openbsd &&
      wget -qO /usr/local/bin/goose https://github.com/pressly/goose/releases/download/v3.21.1/goose_linux_x86_64 &&
      chmod +x /usr/local/bin/goose &&
      until nc -z mysql 3306; do echo 'âŒ› aguardando MySQL...'; sleep 2; done &&
      goose -dir ./migrations mysql 'root:root@tcp(mysql:3306)/wallet?parseTime=true&multiStatements=true' up
      "

  zookeeper:
    image: "confluentinc/cp-zookeeper:6.1.0"
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      TZ: Sao_Paulo/Brazil
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: "confluentinc/cp-enterprise-kafka:6.1.0"
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
    # Exposes 9092 for external connections to the broker
    # Use kafka:29092 for connections internal on the docker network
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - '9092:9092'
    environment:
      TZ: Sao_Paulo/Brazil
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
  
  challenge-database:
    container_name: challenge-database
    image: postgres:15.4-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: challenge
    ports:
      - "5432:5432"  
    volumes:
      - .docker/challenge-database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d challenge"]
      interval: 5s
      timeout: 5s
      retries: 5

  challenge-app:
    container_name: challenge-app
    build: ./fc-eda-spring-boot
    ports:
      - "3003:3003"
    depends_on:
      challenge-database:
        condition: service_healthy